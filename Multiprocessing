// GROUP MEMBER NAMES:
// Aarthi Shree Senthil Kumar
// G. Neeraj Varma
// Manav Sharma
// Kotagiri Vinay Chandra
// Venkata krishna Manohar Bulusu
// Shreya Atul Mudgal
// Ronda Sri Harshitha
// Sanskriti Sharma 

#include<stdio.h>
#include <stdlib.h>
#include <math.h>
#include<pthread.h>
#include <string.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <unistd.h>
#include <time.h>
#include <signal.h>

int a,b;

typedef struct{
    int x;
    int p;
    int result;
} data_struct;
int counter =0;

// Checks if n is a prime number.
int isPrime(int n){
    if(n==2){
        return 1;
    }
    for(int i=2;i*i<n+1;i++){
        if(n%i==0){
            return 0;
        }
    }
    return 1;

}

// Validates if the input element taken lies between a and b.
int validate(int x)
{
    if((a<=x && x<=b)!= 1)
    {
        printf("Not a valid input. The input value %d is not in the range %d to %d \n",x,a,b);
        return 1;
    }
    return 0;
}

void handleSignal(int signal)
{
    printf("Worker process terminated before returning wapx value\n");
}


// thread that calculates the value of thapx
void *calculate_thapx (void *args)
{  
    data_struct  *data = (data_struct*)args;
    int x=data->x;
    int p=data->p;
    int arr[2*p];
    printf("Thread process started , element being %d being processed \n", x );
    int ans=0;
    int count=0;
    int validx=validate(x);
    int index = 0 ; 
   
    if(validx==0)
    {
        //only when validx==0, we need to find thapx
        if(isPrime(x)){
        arr[index] = x;
        index = index + 1;
        printf("Prime no found %d for element %d \n", x , x );
            count+=1;
            ans+=x;
        }
        int left=0;
        int i=x-1;
        while(left<p && i>1)
        {
            if(isPrime(i)){
            	arr[index] = i;
                index = index + 1;
                printf("Prime no found %d for element %d \n", i , x );
                ans+=i;
                count+=1;
                left+=1;
            }
            i-=1;
        }
        int right=0;
        i=x+1;
        while(right<p){
            if(isPrime(i)){
            arr[index] = i;
            index = index + 1;
            printf("Prime no found %d for element %d \n", i , x );
                ans+=i;
                count+=1;
                right+=1;
            }
            i+=1;
        }
        printf("\n");
        printf("The px set is : { " );
        for (int i = 0; i < 2*p ; i++){
        	printf("%d, ",arr[i]);}
        printf("}\n");
        ans/=count;
        printf("Thapx of %d is %d\n", x, ans);

        data->result = ans;
        counter++;
        
    }
    return 0;
}


int main(int argc, char** argv){

    clock_t t;
    t = clock();

    int n = atoi(argv[1]);
    a=atoi(argv[2]);
    b=atoi(argv[3]);
    int p = atoi(argv[4]);
    
    printf("Input as been taken as command line arguement ");
    printf(" n = %d, a = %d , b = %d , p =%d \n", n , a , b, p );
    printf("The values of matrix: ");
    int fd[n][2];
    pid_t pid[n];
    int arr[n][n];
    int idx = 5;
    for(int i=0;i<n;i++){
        for(int j=0;j<n;j++){
            arr[i][j] = atoi(argv[idx]);
            printf("%d " , arr[i][j]);
            idx++;
        }
    }
    
    printf("\n");
    for (int i = 0; i < n; i++)
    {
        pipe(fd[i]);
        printf("Pipe has been created for process no : %d \n" , i );
        printf("Worker process: %d has been created \n " , i);
        signal(SIGCHLD,handleSignal);
        
        if((pid[i]=fork()) == 0)
        {
            int status=0;
            int ans=0;
            pthread_t tid[n];
            data_struct data[n];
            for(int j=0;j<n;j++){
                data[j].x=arr[i][j];
                data[j].p=p;
                data[j].result = 0;
                

                pthread_create(&tid[j], NULL, calculate_thapx, (void*)(&data[j]));
                printf("Thread process has been created for element : %d \n " , data[j].x);
                
            }
            // sleep(1);
            for(int j=0;j<n;j++){
            printf("Thread join over for the element %d in row %d and column %d \n", arr[i][j] , i , j);
                pthread_join(tid[j],NULL);

            }
            while(counter<n){
                continue;
            }
            
            for(int j=0;j<n;j++){
                ans += data[j].result;
            }

            
            ans=ans/n;
            close(fd[i][0]);
            write(fd[i][1], &ans, sizeof(ans));
     	    printf("Wapx Value %d of row %d had been written to the pipe \n",ans,i);
            exit(0);
        }

    }
    
    printf("All thapx values created and entered into pipe\n");
    int status=0,ans=0,wpapx=0;
    
    for(int i=0;i<n;i++){
        waitpid(pid[i],&status,0);
        close(fd[i][1]);
        read(fd[i][0], &wpapx, sizeof(wpapx));
        printf("Wpapx of row %d is %d  has been captured\n", i, wpapx);
        ans += wpapx;
    }

    ans /= n;
    printf("Fapx calculated is %d\n", ans);

    t = clock()-t;
    double time_taken = ((double)t)/CLOCKS_PER_SEC;
    printf("Time taken to execute: %f\n",time_taken); 
    
}

/// end of code.

